#!/usr/bin/env bash

set -euo pipefail

if [ $# -eq 0 ] || [[ "$1" == "--help" ]]; then
  echo -e "üîç Request a Copilot code review on a GitHub pull request"
  echo -e ""
  echo -e "\033[1mUSAGE\033[0m"
  echo -e "  gh copilot-review [<number> | <url>]"
  echo -e ""
  echo -e "\033[1mINHERITED FLAGS\033[0m"
  echo -e "  --help   Show help for command"
  echo -e ""
  echo -e "\033[1mARGUMENTS\033[0m"
  echo -e "  A pull request can be supplied as argument in any of the following formats:"
  echo -e "  - by number, e.g. \"123\";"
  echo -e "  - by URL, e.g. \"https://github.com/OWNER/REPO/pull/123\"."
  echo -e ""
  echo -e "\033[1mEXAMPLES\033[0m"
  echo -e "  $ gh-copilot-review 353"
  echo -e "  $ gh-copilot-review https://github.com/OWNER/REPO/pull/353"
  echo -e ""
  echo -e "\033[1mLEARN MORE\033[0m"
  echo -e "  Use \`gh copilot-review --help\` for more information about this command."
  echo -e "  Read the manual at https://github.com/ChrisCarini/gh-copilot-review"
  exit 0
fi

input="$1"

# Function to extract repo from git remote
get_repo_from_git() {
  git_url=$(git remote get-url origin 2>/dev/null)
  if [ -z "$git_url" ]; then
    echo "‚ùå Error: Could not get git remote URL. Are you in a git repo?" >&2
    exit 1
  fi

  case "$git_url" in
    git@github.com:*)
      echo "$git_url" | sed -e 's|git@github.com:||' -e 's|\.git$||'
      ;;
    https://github.com/*)
      echo "$git_url" | sed -e 's|https://github.com/||' -e 's|\.git$||'
      ;;
    ssh://*@github.com/*)
      echo "$git_url" | sed -e 's|.*@github.com/||' -e 's|\.git$||'
      ;;
    *)
      echo "‚ùå Error: Unsupported git remote format: $git_url" >&2
      exit 1
      ;;
  esac
}

case "$input" in
  ''|*[^0-9]*)
    # Assume it's a URL
    case "$input" in
      *github.com/*/pull/*)
        repo=$(printf '%s\n' "$input" | sed -E 's|.*github.com/([^/]+/[^/]+)/pull/[0-9]+.*|\1|')
        pr_number=$(printf '%s\n' "$input" | sed -E 's|.*/pull/([0-9]+).*|\1|')

        if [ -z "$repo" ] || [ -z "$pr_number" ]; then
          echo "‚ùå Error: Could not extract repo or PR number from URL."
          exit 1
        fi
        ;;
      *)
        echo "‚ùå Error: Invalid input. Provide a GitHub PR URL or PR number."
        exit 1
        ;;
    esac
    ;;
  *)
    # All digits ‚Üí PR number, get repo from git
    pr_number="$input"
    repo=$(get_repo_from_git)
    if [ -z "$repo" ]; then
      echo "‚ùå Error: Could not determine repo from git remote."
      exit 1
    fi
    ;;
esac

# Make the API call
echo "üîç Requesting Copilot Code Review on ${repo} PR #${pr_number}..."
set +e
response=$(gh api --method POST "/repos/${repo}/pulls/${pr_number}/requested_reviewers" \
  -f "reviewers[]=copilot-pull-request-reviewer[bot]" 2>&1)
status=$?
set -e

# Validate response
if [ $status -eq 0 ]; then
  echo "‚úÖ Success: Requested Copilot Code Review on https://github.com/${repo}/pull/${pr_number}"
else
  echo "‚ùå Failure: Could not request Copilot Code Review on https://github.com/${repo}/pull/${pr_number}"
  # Only show debug info if any of the below are set
  #   - `DEBUG_COPILOT_REVIEW=true`
  #   - `ACTIONS_STEP_DEBUG=true`
  #   - `ACTIONS_RUNNER_DEBUG=true`
  #   - `RUNNER_DEBUG=1` (set when a user checks the `Enable debug logging` checkbox when re-running a job)
  if [ "${DEBUG_COPILOT_REVIEW:-}" = "true" ] || [ "${ACTIONS_STEP_DEBUG:-}" = "true" ] || [ "${ACTIONS_RUNNER_DEBUG:-}" = "true" ] || [ "${RUNNER_DEBUG:-}" = "1" ]; then
    echo "üîç Debug Info:"
    echo "$response" | jq . || echo "$response"
  fi

  exit $status
fi
